# Basic Terminal Commands Notes
---
#### Overview:
This set of notes covers fundamental terminal commands for navigation, file manipulation, and directory management.
---
#### 1. Change Directory (cd):

- Command: `cd [directory_path]`
- Usage:
  - Change to a specific directory.
  - Example: `cd Documents`

---

#### 2. Make Directory (mkdir):

- Command: `mkdir [directory_name]`
- Usage:
  - Create a new directory.
  - Example: `mkdir NewFolder`

---

#### 3. Remove (rm):

- Command: `rm [file_or_directory]`
- Usage:
  - Remove a file or an empty directory.
  - Example: `rm file.txt`

---

#### 4. Clear Screen (clear):

- Command: `clear`
- Usage:
  - Clear the terminal screen for better visibility.

---

#### 5. Parent Directory (cd ..):

- Command: `cd ..`
- Usage:
  - Move to the parent directory.

---

#### 6. Create Empty File (touch):

- Command: `touch [file_name]`
- Usage:
  - Create an empty file.
  - Example: `touch newfile.txt`

---

#### 7. List Contents (ls):

- Command: `ls`
- Usage:
  - List files and directories in the current directory.

---

#### 8. List Detailed Contents (ls -l):

- Command: `ls -l`
- Usage:
  - List detailed information about files and directories.

---

#### 9. List All Contents (ls -a):

- Command: `ls -a`
- Usage:
  - List all files and directories, including hidden ones.

---

#### 10. List with Human-Readable Sizes (ls -lh):

- Command: `ls -lh`
- Usage:
  - List files and directories with human-readable file sizes.

#### Conclusion:
These basic terminal commands form the foundation for navigating, creating, and managing files and directories in a Unix-like command-line environment.

/*  demo 

C:\Users\Ayushi\ayushigaur>cd..

C:\Users\Ayushi>mkdir ayu

C:\Users\Ayushi>cd ayu

C:\Users\Ayushi\ayu>touch f1 f2 f3

C:\Users\Ayushi\ayu>ls -l
total 0
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f1
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f2
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f3

C:\Users\Ayushi\ayu>cat>f1
this is f1 file


q

ndjdjjd

C:\Users\Ayushi\ayu>cat f1
this is f1 file


q

ndjdjjd

C:\Users\Ayushi\ayu>cat>>f1
this is ayushi i m adding this to show when u use cat>>f1 then this content will not get removed it will add the content with upper onen

C:\Users\Ayushi\ayu>cat f1
this is f1 file


q

ndjdjjd
this is ayushi i m adding this to show when u use cat>>f1 then this content will not get removed it will add the content with upper onen

C:\Users\Ayushi\ayu>cat>f1
this is added now content above one was removed when u used cat>f1  it will add new content by removing earlier

C:\Users\Ayushi\ayu>cat f1
this is added now content above one was removed when u used cat>f1  it will add new content by removing earlier

C:\Users\Ayushi\ayu>cd..

C:\Users\Ayushi>cd ayu

C:\Users\Ayushi\ayu>ls -l
total 1
-rw-r--r-- 1 Ayushi 197121 112 Jan 20 01:23 f1
-rw-r--r-- 1 Ayushi 197121   0 Jan 20 01:21 f2
-rw-r--r-- 1 Ayushi 197121   0 Jan 20 01:21 f3

C:\Users\Ayushi\ayu>mkdir ari

C:\Users\Ayushi\ayu>mv f1 ari

C:\Users\Ayushi\ayu>ls -l
total 0
drwxr-xr-x 1 Ayushi 197121 0 Jan 20 01:25 ari
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f2
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f3

C:\Users\Ayushi\ayu>cd ari

C:\Users\Ayushi\ayu\ari>ls -l
total 1
-rw-r--r-- 1 Ayushi 197121 112 Jan 20 01:23 f1

C:\Users\Ayushi\ayu\ari>rm f1

C:\Users\Ayushi\ayu\ari>ls -l
total 0

C:\Users\Ayushi\ayu\ari>cd..

C:\Users\Ayushi\ayu>ls -l
total 0
drwxr-xr-x 1 Ayushi 197121 0 Jan 20 01:25 ari
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f2
-rw-r--r-- 1 Ayushi 197121 0 Jan 20 01:21 f3


**********************************git commands*********************
Git Basics:

Overview:
Git is a distributed version control system (VCS) used in software development to track changes insource code.


****************how to use git****************
step 1: to use github we need to download git version control 
step 2:  these steps are used to describe how we can use different command to make changes on github easily 



***********command 1: The clone command ***********
is used to copy a repository from GitHub to a local machine.

Clone the Repository:
=> Use the git clone command followed by the repository URL to copy it to your local machine.
=> git clone command helpful in cloneing the repositry of git hub into our local system
Example:git clone https://github.com/example/repo.git



********************command 2: Git Status command :********************

Git Status Overview
The git status command in Git provides information about the state of your local repository in relation to the remote repository. It details changes in your working directory, the staging area, and the branch status concerning the remote repository.

File Types in Git Status
Changes to Be Committed: (commit command )
Lists modified files that have been staged (added to the index) and are ready to be committed in the next snapshot.

Changes Not Staged for Commit: (add /.add command)
Lists modified files that have not been staged yet. These changes will not be part of the next commit unless explicitly staged.
Untracked Files:


Lists files in your working directory that are not part of the Git repository. Git is not tracking changes to these files.
File Status Lifecycle
Untracked ➔ (add the file) ➔ Unmodified ➔ (edit the file) ➔ Modified ➔ (stage the file) ➔ Staged ➔ (commit the file)

Basic Commands
Add:
Add new or changed files in your working directory to the Git staging area.
git add filename

Commit:
Record changes as a snapshot in the version history.
git commit -m "commit message


Push: Push local changes to the remote repository.(those chnages which was in local we do in remote as well)
git push origin main 


Example Usage (Inside Terminal)
# Change to the repository directory
cd path/to/your/repository

# Add a specific file
git add index.html

# Check the status after adding
git status

# Commit the changes
git commit -m "index.html is now committed"

# Check status and push changes to the remote repository
git status
git push origin main

work flow 
github : 
code 
changes
directly commit

git:
code changes
add (stage a change)
commit(commit change)
push (push it in remote)

******************command 3:git branches***************************

git branches in the devlopement 
it define the  entier commitimng process  made in the devlopement  and hierreachy process can be maintian  :?git define the level of acesss assgined 

brances related command 
git branch -M <branch name>  to rename the branch 
git branch   tell in which branch we are in 
git checkout  <branch name> to navigate the brancch
git checkout -b <branch name > create the new branch 
git checkout   git branch -d <branch name> //delete the branch 

***********demo of command 3*************
#this is demo inside my repl 
=>Viewing Branches: 
 command : git branch
=>Renaming the Branch:
 command : git branch -M main
=>Switching Between Branches:
git checkout ayushi
git checkout main
git checkout -b work
git checkout work
git checkout -b feature
=>Deleting a Branch:
 git branch -d ayushi

